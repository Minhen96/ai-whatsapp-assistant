{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useChat } from '../context/ChatContext';\nimport { CHAT_MODES } from '../utils/constants';\nimport { createMessage, createErrorMessage } from '../utils/messageHelpers';\nimport { sendChatMessage } from '../services/api/chatApi';\nimport { sendWhatsAppMessage } from '../services/api/whatsappApi';\nexport const useChatMessages = mode => {\n  _s();\n  const {\n    addMessage,\n    setLoading,\n    userId\n  } = useChat();\n  const handleSendMessage = async message => {\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage = createMessage(message, 'user', mode);\n    addMessage(userMessage);\n    setLoading(true);\n    try {\n      let data;\n\n      // Route to appropriate service based on mode\n      if (mode === CHAT_MODES.WHATSAPP) {\n        data = await sendWhatsAppMessage(message);\n      } else {\n        data = await sendChatMessage(message, mode);\n      }\n\n      // Add bot response with documents if available\n      const botMessage = createMessage(data.response || data.message || \"Sorry, I couldn't process your request.\", 'bot', mode);\n\n      // Attach documents if they exist in the response\n      if (data.documents && Array.isArray(data.documents)) {\n        botMessage.documents = data.documents;\n        botMessage.hasDocuments = data.documents.length > 0;\n      }\n\n      // Store userId for downloads\n      if (!botMessage.userId) {\n        botMessage.userId = userId || data.userId;\n      }\n      addMessage(botMessage);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      addMessage(createErrorMessage(error, mode));\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    handleSendMessage\n  };\n};\n_s(useChatMessages, \"roR7s67OdbZ9lLEedfFSwNT0XRM=\", false, function () {\n  return [useChat];\n});","map":{"version":3,"names":["useState","useChat","CHAT_MODES","createMessage","createErrorMessage","sendChatMessage","sendWhatsAppMessage","useChatMessages","mode","_s","addMessage","setLoading","userId","handleSendMessage","message","trim","userMessage","data","WHATSAPP","botMessage","response","documents","Array","isArray","hasDocuments","length","error","console"],"sources":["C:/Users/Minhen/Downloads/AIAssistant-new/Frontend/src/hooks/useChatMessages.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useChat } from '../context/ChatContext';\r\nimport { CHAT_MODES } from '../utils/constants';\r\nimport { createMessage, createErrorMessage } from '../utils/messageHelpers';\r\nimport { sendChatMessage } from '../services/api/chatApi';\r\nimport { sendWhatsAppMessage } from '../services/api/whatsappApi';\r\n\r\nexport const useChatMessages = (mode) => {\r\n  const { addMessage, setLoading, userId } = useChat();\r\n\r\n  const handleSendMessage = async (message) => {\r\n    if (!message.trim()) return;\r\n\r\n    // Add user message\r\n    const userMessage = createMessage(message, 'user', mode);\r\n    addMessage(userMessage);\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      let data;\r\n\r\n      // Route to appropriate service based on mode\r\n      if (mode === CHAT_MODES.WHATSAPP) {\r\n        data = await sendWhatsAppMessage(message);\r\n      } else {\r\n        data = await sendChatMessage(message, mode);\r\n      }\r\n\r\n      // Add bot response with documents if available\r\n      const botMessage = createMessage(\r\n        data.response || data.message || \"Sorry, I couldn't process your request.\",\r\n        'bot',\r\n        mode\r\n      );\r\n\r\n      // Attach documents if they exist in the response\r\n      if (data.documents && Array.isArray(data.documents)) {\r\n        botMessage.documents = data.documents;\r\n        botMessage.hasDocuments = data.documents.length > 0;\r\n      }\r\n\r\n      // Store userId for downloads\r\n      if (!botMessage.userId) {\r\n        botMessage.userId = userId || data.userId;\r\n      }\r\n\r\n      addMessage(botMessage);\r\n\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      addMessage(createErrorMessage(error, mode));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { handleSendMessage };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,aAAa,EAAEC,kBAAkB,QAAQ,yBAAyB;AAC3E,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,mBAAmB,QAAQ,6BAA6B;AAEjE,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAO,CAAC,GAAGX,OAAO,CAAC,CAAC;EAEpD,MAAMY,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3C,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;;IAErB;IACA,MAAMC,WAAW,GAAGb,aAAa,CAACW,OAAO,EAAE,MAAM,EAAEN,IAAI,CAAC;IACxDE,UAAU,CAACM,WAAW,CAAC;IAEvBL,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,IAAIM,IAAI;;MAER;MACA,IAAIT,IAAI,KAAKN,UAAU,CAACgB,QAAQ,EAAE;QAChCD,IAAI,GAAG,MAAMX,mBAAmB,CAACQ,OAAO,CAAC;MAC3C,CAAC,MAAM;QACLG,IAAI,GAAG,MAAMZ,eAAe,CAACS,OAAO,EAAEN,IAAI,CAAC;MAC7C;;MAEA;MACA,MAAMW,UAAU,GAAGhB,aAAa,CAC9Bc,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACH,OAAO,IAAI,yCAAyC,EAC1E,KAAK,EACLN,IACF,CAAC;;MAED;MACA,IAAIS,IAAI,CAACI,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,SAAS,CAAC,EAAE;QACnDF,UAAU,CAACE,SAAS,GAAGJ,IAAI,CAACI,SAAS;QACrCF,UAAU,CAACK,YAAY,GAAGP,IAAI,CAACI,SAAS,CAACI,MAAM,GAAG,CAAC;MACrD;;MAEA;MACA,IAAI,CAACN,UAAU,CAACP,MAAM,EAAE;QACtBO,UAAU,CAACP,MAAM,GAAGA,MAAM,IAAIK,IAAI,CAACL,MAAM;MAC3C;MAEAF,UAAU,CAACS,UAAU,CAAC;IAExB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9ChB,UAAU,CAACN,kBAAkB,CAACsB,KAAK,EAAElB,IAAI,CAAC,CAAC;IAC7C,CAAC,SAAS;MACRG,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEE;EAAkB,CAAC;AAC9B,CAAC;AAACJ,EAAA,CAnDWF,eAAe;EAAA,QACiBN,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}