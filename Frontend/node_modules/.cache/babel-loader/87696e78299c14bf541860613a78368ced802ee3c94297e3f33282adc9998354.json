{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minhen\\\\Downloads\\\\AIAssistant-new\\\\Frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nconst initialState = {\n  messages: [],\n  isLoading: false,\n  currentMode: null,\n  userId: null,\n  isConnected: false\n};\nfunction chatReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case 'SET_MESSAGES':\n      return {\n        ...state,\n        messages: action.payload\n      };\n    case 'SET_MODE':\n      return {\n        ...state,\n        currentMode: action.payload\n      };\n    case 'SET_USER_ID':\n      return {\n        ...state,\n        userId: action.payload\n      };\n    case 'SET_CONNECTION':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'CLEAR_MESSAGES':\n      return {\n        ...state,\n        messages: []\n      };\n    default:\n      return state;\n  }\n}\nexport function ChatProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n  const addMessage = message => {\n    dispatch({\n      type: 'ADD_MESSAGE',\n      payload: message\n    });\n  };\n  const setLoading = loading => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: loading\n    });\n  };\n  const setMode = mode => {\n    dispatch({\n      type: 'SET_MODE',\n      payload: mode\n    });\n  };\n  const setUserId = userId => {\n    dispatch({\n      type: 'SET_USER_ID',\n      payload: userId\n    });\n  };\n  const setConnection = connected => {\n    dispatch({\n      type: 'SET_CONNECTION',\n      payload: connected\n    });\n  };\n  const clearMessages = () => {\n    dispatch({\n      type: 'CLEAR_MESSAGES'\n    });\n  };\n  const value = {\n    ...state,\n    addMessage,\n    setLoading,\n    setMode,\n    setUserId,\n    setConnection,\n    clearMessages\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ChatProvider;\nexport function useChat() {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","ChatContext","initialState","messages","isLoading","currentMode","userId","isConnected","chatReducer","state","action","type","payload","ChatProvider","children","_s","dispatch","addMessage","message","setLoading","loading","setMode","mode","setUserId","setConnection","connected","clearMessages","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Minhen/Downloads/AIAssistant-new/Frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  isLoading: false,\r\n  currentMode: null,\r\n  userId: null,\r\n  isConnected: false\r\n};\r\n\r\nfunction chatReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'ADD_MESSAGE':\r\n      return { \r\n        ...state, \r\n        messages: [...state.messages, action.payload] \r\n      };\r\n    case 'SET_MESSAGES':\r\n      return { ...state, messages: action.payload };\r\n    case 'SET_MODE':\r\n      return { ...state, currentMode: action.payload };\r\n    case 'SET_USER_ID':\r\n      return { ...state, userId: action.payload };\r\n    case 'SET_CONNECTION':\r\n      return { ...state, isConnected: action.payload };\r\n    case 'CLEAR_MESSAGES':\r\n      return { ...state, messages: [] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function ChatProvider({ children }) {\r\n  const [state, dispatch] = useReducer(chatReducer, initialState);\r\n\r\n  const addMessage = (message) => {\r\n    dispatch({ type: 'ADD_MESSAGE', payload: message });\r\n  };\r\n\r\n  const setLoading = (loading) => {\r\n    dispatch({ type: 'SET_LOADING', payload: loading });\r\n  };\r\n\r\n  const setMode = (mode) => {\r\n    dispatch({ type: 'SET_MODE', payload: mode });\r\n  };\r\n\r\n  const setUserId = (userId) => {\r\n    dispatch({ type: 'SET_USER_ID', payload: userId });\r\n  };\r\n\r\n  const setConnection = (connected) => {\r\n    dispatch({ type: 'SET_CONNECTION', payload: connected });\r\n  };\r\n\r\n  const clearMessages = () => {\r\n    dispatch({ type: 'CLEAR_MESSAGES' });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    addMessage,\r\n    setLoading,\r\n    setMode,\r\n    setUserId,\r\n    setConnection,\r\n    clearMessages\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useChat() {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}