{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useWebSocket } from './useWebSocket';\nimport { useChat } from '../context/ChatContext';\nexport const useWebSocketSync = () => {\n  _s();\n  const {\n    addMessage,\n    setConnection\n  } = useChat();\n  const {\n    isConnected,\n    lastMessage,\n    error\n  } = useWebSocket(`ws://localhost:8080/ws/chat?userId=frontend-user`, {\n    onMessage: data => {\n      console.log('Received WebSocket message:', data);\n      if (data.type === 'whatsapp_message') {\n        // Add WhatsApp message to chat\n        const whatsappMessage = {\n          id: Date.now(),\n          type: 'bot',\n          content: `ðŸ“± WhatsApp: ${data.message}`,\n          timestamp: new Date(data.timestamp),\n          source: 'whatsapp'\n        };\n        addMessage(whatsappMessage);\n\n        // Add AI response\n        const aiResponse = {\n          id: Date.now() + 1,\n          type: 'bot',\n          content: data.response,\n          timestamp: new Date(data.timestamp + 1000),\n          source: 'whatsapp'\n        };\n        addMessage(aiResponse);\n      } else if (data.type === 'frontend_message') {\n        // Sync with other frontend clients\n        if (data.userId !== 'frontend-user') {\n          const syncMessage = {\n            id: Date.now(),\n            type: 'bot',\n            content: `ðŸ‘¤ Other user: ${data.message}`,\n            timestamp: new Date(data.timestamp),\n            source: 'sync'\n          };\n          addMessage(syncMessage);\n        }\n      } else if (data.type === 'system_message') {\n        // System notifications\n        const systemMessage = {\n          id: Date.now(),\n          type: 'bot',\n          content: `ðŸ”” System: ${data.message}`,\n          timestamp: new Date(data.timestamp),\n          source: 'system'\n        };\n        addMessage(systemMessage);\n      }\n    },\n    onOpen: () => {\n      console.log('WebSocket connected for sync');\n      setConnection(true);\n    },\n    onClose: () => {\n      console.log('WebSocket disconnected');\n      setConnection(false);\n    },\n    onError: error => {\n      console.error('WebSocket sync error:', error);\n      setConnection(false);\n    }\n  });\n  useEffect(() => {\n    setConnection(isConnected);\n  }, [isConnected, setConnection]);\n  return {\n    isConnected,\n    error\n  };\n};\n_s(useWebSocketSync, \"YwZQ6nVK+SPzY7CRYcLcsGtvwsg=\", false, function () {\n  return [useChat, useWebSocket];\n});","map":{"version":3,"names":["useEffect","useWebSocket","useChat","useWebSocketSync","_s","addMessage","setConnection","isConnected","lastMessage","error","onMessage","data","console","log","type","whatsappMessage","id","Date","now","content","message","timestamp","source","aiResponse","response","userId","syncMessage","systemMessage","onOpen","onClose","onError"],"sources":["C:/Users/Minhen/Downloads/AIAssistant-new/Frontend/src/hooks/useWebSocketSync.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useWebSocket } from './useWebSocket';\r\nimport { useChat } from '../context/ChatContext';\r\n\r\nexport const useWebSocketSync = () => {\r\n  const { addMessage, setConnection } = useChat();\r\n  \r\n  const { isConnected, lastMessage, error } = useWebSocket(\r\n    `ws://localhost:8080/ws/chat?userId=frontend-user`,\r\n    {\r\n      onMessage: (data) => {\r\n        console.log('Received WebSocket message:', data);\r\n        \r\n        if (data.type === 'whatsapp_message') {\r\n          // Add WhatsApp message to chat\r\n          const whatsappMessage = {\r\n            id: Date.now(),\r\n            type: 'bot',\r\n            content: `ðŸ“± WhatsApp: ${data.message}`,\r\n            timestamp: new Date(data.timestamp),\r\n            source: 'whatsapp'\r\n          };\r\n          addMessage(whatsappMessage);\r\n          \r\n          // Add AI response\r\n          const aiResponse = {\r\n            id: Date.now() + 1,\r\n            type: 'bot',\r\n            content: data.response,\r\n            timestamp: new Date(data.timestamp + 1000),\r\n            source: 'whatsapp'\r\n          };\r\n          addMessage(aiResponse);\r\n        } else if (data.type === 'frontend_message') {\r\n          // Sync with other frontend clients\r\n          if (data.userId !== 'frontend-user') {\r\n            const syncMessage = {\r\n              id: Date.now(),\r\n              type: 'bot',\r\n              content: `ðŸ‘¤ Other user: ${data.message}`,\r\n              timestamp: new Date(data.timestamp),\r\n              source: 'sync'\r\n            };\r\n            addMessage(syncMessage);\r\n          }\r\n        } else if (data.type === 'system_message') {\r\n          // System notifications\r\n          const systemMessage = {\r\n            id: Date.now(),\r\n            type: 'bot',\r\n            content: `ðŸ”” System: ${data.message}`,\r\n            timestamp: new Date(data.timestamp),\r\n            source: 'system'\r\n          };\r\n          addMessage(systemMessage);\r\n        }\r\n      },\r\n      onOpen: () => {\r\n        console.log('WebSocket connected for sync');\r\n        setConnection(true);\r\n      },\r\n      onClose: () => {\r\n        console.log('WebSocket disconnected');\r\n        setConnection(false);\r\n      },\r\n      onError: (error) => {\r\n        console.error('WebSocket sync error:', error);\r\n        setConnection(false);\r\n      }\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    setConnection(isConnected);\r\n  }, [isConnected, setConnection]);\r\n\r\n  return {\r\n    isConnected,\r\n    error\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}